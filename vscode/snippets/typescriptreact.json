{
  "debugger": {
    "prefix": "deb",
    "description": "Debugger",
    "body": [
      "debugger;${0}"
    ]
  },
  "try-catch": {
    "prefix": "try:catch",
    "description": "try catch error",
    "body": [
      "try {",
      "  ${0}",
      "} catch (${1:error}) {",
      "  throw new Error(${1:error});",
      "}",
    ]
  },
  "eslint-global": {
    "prefix": "eslint:global",
    "description": "Eslint: global",
    "body": [
      "/* global ${1:GlobalVar};*/"
    ]
  },
  "eslint-off": {
    "prefix": "eslint:off",
    "description": "Eslint: off",
    "body": [
      "/* eslint ${1:eqeqeq}: \"${2:off}\"${3:, ${4:curly}: \"${5:error}\"} $0*/ "
    ]
  },
  "eslint-disable": {
    "prefix": "eslint:disable",
    "description": "Eslint: disable",
    "body": [
      "/* eslint-disable $0*/"
    ]
  },
  "eslint-enable": {
    "prefix": "eslint:enable",
    "description": "Eslint: enable",
    "body": [
      "/* eslint-enable */"
    ]
  },
  "eslint-env": {
    "prefix": "eslint:env",
    "description": "Eslint: env",
    "body": [
      "/* eslint-env $0*/"
    ]
  },
  "eslint-disable-line": {
    "prefix": "eslint:disable-disable-line",
    "description": "Eslint: disable line",
    "body": [
      "// eslint-disable-line $0"
    ]
  },
  "eslint-disable-next-line": {
    "prefix": "eslint:disable-next-line",
    "description": "Eslint: disable next line",
    "body": [
      "// eslint-disable-next-line $0"
    ]
  },
  "const": {
    "prefix": "const",
    "description": "Create const",
    "body": [
      "const ${1:varHere} = $0;",
      ""
    ]
  },
  "const-afunction": {
    "prefix": "const:arrow-function",
    "description": "Create arrow function",
    "body": [
      "const ${1:functionHere} = ($2) => {",
      "  ${0:// Do something here...}",
      "}",
      ""
    ]
  },
  "const-afunction2": {
    "prefix": "const:arrow-function",
    "description": "const function",
    "body": [
      "const ${functionHere} = () => {",
      "  return {$0}",
      "}",
      ""
    ]
  },
  "function =>": {
    "prefix": "function =>",
    "description": "Arrow function",
    "body": [
      "($1) => {",
      "  $0",
      "}"
    ]
  },
  "import": {
    "prefix": "import",
    "description": "Node module import from",
    "body": [
      "import ${Module} from '${module}'",
      ""
    ]
  },
  "require": {
    "prefix": "require",
    "description": "Node module require",
    "body": [
      "${const} ${Module} = require('${module}')",
      ""
    ]
  },
  "console": {
    "prefix": "clog",
    "description": "Log output to console",
    "body": [
      "console.${2:log}({ ${1:var} });"
    ]
  },
  "export:default": {
    "prefix": "export",
    "description": "export default",
    "body": [
      "export default {",
      "  ${0:// Do something here...}",
      "}",
      ""
    ]
  },
  "g:logger": {
    "prefix": "g:logger",
    "description": "GAS Logger.log",
    "body": [
      "Logger.log($0)",
      ""
    ]
  },
  "http:get": {
    "prefix": "http:get",
    "description": "Axios http get",
    "body": [
      "http",
      "  .get(`${1:/end/point}`, {})",
      "  .then(json => json.data)",
      "  .catch(error => ({ error }))",
      ""
    ]
  },
  "http:post": {
    "prefix": "http:post",
    "description": "Axios http POST",
    "body": [
      "http",
      "  .post(`${1:/end/point}`, {})",
      "  .then(json => json.data)",
      "  .catch(error => ({ error }))",
      ""
    ]
  },
  "promise": {
    "prefix": "promise",
    "description": "New Promise",
    "body": [
      "new Promise((resolve, reject) => {",
      "  ${0:// Do something here...}",
      "  resolve();",
      "})",
      ""
    ]
  },
  "styled": {
    "prefix": "styled",
    "description": "styled component ",
    "body": [
      "export const Styled${1:Button} = styled.${2:button}`${0}`;"
    ]
  },
  "styled:import": {
    "prefix": "styled:import",
    "description": "import styled-components",
    "body": [
      "import styled from 'styled-components';"
    ]
  },
  "react:import": {
    "prefix": "react:import",
    "description": "import react",
    "body": [
      "import React from 'react';"
    ]
  },
  "react:base:stateless": {
    "prefix": "react:base",
    "description": "React stateless base component",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:ComponentName}Props {}",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = (props: ${1:ComponentName}Props) => {",
      "  return (",
      "    <>",
      "      <h1>${1:ComponentName}${0}</h1>",
      "    </>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};",
      ""
    ]
  },
  "react:next:page": {
    "prefix": "react:next:page",
    "description": "React next page component",
    "body": [
      "import React from 'react';",
      "import { NextPage } from 'next';",
      "",
      "interface ${1:HomePage}Props {}",
      "",
      "// eslint-disable-next-line no-unused-vars",
      "const ${1:HomePage}: NextPage<${1:HomePage}Props> = (props: ${1:HomePage}Props) => {",
      "  return <>${1:HomePage}${0}</>;",
      "};",
      "",
      "${1:HomePage}.getInitialProps = async () => {",
      "  return {};",
      "};",
      "",
      "export default ${1:HomePage};",
      ""
    ]
  },
  "Import React": {
    "prefix": "react:imr",
    "body": [
      "import React from 'react';"
    ],
    "description": "Import React"
  },
  "Import React, { Component }": {
    "prefix": "react:imrc",
    "body": [
      "import React, { Component } from 'react';"
    ],
    "description": "Import React, { Component }"
  },
  "Import React, { useState }": {
    "prefix": "react:imrs",
    "body": [
      "import React, { useState } from 'react';"
    ],
    "description": "Import React, { useState }"
  },
  "Import React, { useState, useEffect }": {
    "prefix": "react:imrse",
    "body": [
      "import React, { useState, useEffect } from 'react';"
    ],
    "description": "Import React, { useState, useEffect }"
  },
  "Import PropTypes": {
    "prefix": "react:impt",
    "body": [
      "import PropTypes from 'prop-types';"
    ],
    "description": "Import PropTypes"
  },
  "Import Pure Component": {
    "prefix": "react:impc",
    "body": [
      "import React, { PureComponent } from 'react';"
    ],
    "description": "Import React, { PureComponent }"
  },
  "Class Component": {
    "prefix": "react:cc",
    "body": [
      "class $1 extends Component {",
      "  state = { $2 }",
      "  render() { ",
      "    return ( $0 );",
      "  }",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Class Component"
  },
  "Class Component With Constructor": {
    "prefix": "react:ccc",
    "body": [
      "class $1 extends Component {",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = { $2 }",
      "  }",
      "  render() { ",
      "    return ( $0 );",
      "  }",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Class Component With Constructor"
  },
  "Stateless Function Component": {
    "prefix": "react:sfc",
    "body": [
      "const $1 = ($2) => {",
      "  return ( $0 );",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Stateless Function Component"
  },
  "componentDidMount": {
    "prefix": "react:cdm",
    "body": [
      "componentDidMount() {",
      "  $0",
      "}"
    ],
    "description": "componentDidMount"
  },
  "useEffect": {
    "prefix": "react:useEffect",
    "body": [
      "useEffect(() => {",
      "  $1",
      "}, []);"
    ],
    "description": "useEffect Hook"
  },
  "componentWillMount": {
    "prefix": "react:cwm",
    "body": [
      "//WARNING! To be deprecated in React v17. Use componentDidMount instead.",
      "componentWillMount() {",
      "  $0",
      "}"
    ],
    "description": "componentWillMount"
  },
  "componentWillReceiveProps": {
    "prefix": "react:cwrp",
    "body": [
      "//WARNING! To be deprecated in React v17. Use new lifecycle static getDerivedStateFromProps instead.",
      "componentWillReceiveProps(nextProps) {",
      "  $0",
      "}"
    ],
    "description": "componentWillReceiveProps"
  },
  "getDerivedStateFromProps": {
    "prefix": "react:gds",
    "body": [
      "static getDerivedStateFromProps(nextProps, prevState) {",
      "  $0",
      "}"
    ],
    "description": "getDerivedStateFromProps"
  },
  "shouldComponentUpdate": {
    "prefix": "react:scu",
    "body": [
      "shouldComponentUpdate(nextProps, nextState) {",
      "  $0",
      "}"
    ],
    "description": "shouldComponentUpdate"
  },
  "componentWillUpdate": {
    "prefix": "react:cwu",
    "body": [
      "//WARNING! To be deprecated in React v17. Use componentDidUpdate instead.",
      "componentWillUpdate(nextProps, nextState) {",
      "  $0",
      "}"
    ],
    "description": "componentWillUpdate"
  },
  "componentDidUpdate": {
    "prefix": "react:cdu",
    "body": [
      "componentDidUpdate(prevProps, prevState) {",
      "  $0",
      "}"
    ],
    "description": "componentDidUpdate"
  },
  "componentWillUnmount": {
    "prefix": "react:cwun",
    "body": [
      "componentWillUnmount() {",
      "  $0",
      "}"
    ],
    "description": "componentWillUnmount"
  },
  "componentDidCatch": {
    "prefix": "react:cdc",
    "body": [
      "componentDidCatch(error, info) {",
      "  $0",
      "}"
    ],
    "description": "componentDidCatch"
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "react:gsbu",
    "body": [
      "getSnapshotBeforeUpdate(prevProps, prevState) {",
      "  $0",
      "}"
    ],
    "description": "getSnapshotBeforeUpdate"
  },
  "setState": {
    "prefix": "react:ss",
    "body": [
      "this.setState({ $1: $2 });"
    ],
    "description": "setState"
  },
  "Functional setState": {
    "prefix": "react:ssf",
    "body": [
      "this.setState(prevState => {",
      "  return { $1: prevState.$1 };",
      "});"
    ],
    "description": "Functional setState"
  },
  "Declare a new state variable using State Hook": {
    "prefix": "react:useState",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);"
    ],
    "description": "Declare a new state Variable using the State Hook. Hit Tab to apply CamelCase to function"
  },
  "render": {
    "prefix": "react:ren",
    "body": [
      "render() {",
      "  return (",
      "     $0",
      "  );",
      "}"
    ],
    "description": "render"
  },
  "Render Prop": {
    "prefix": "react:rprop",
    "body": [
      "class $1 extends Component {",
      "  state = { $2: $3 }",
      "  render() { ",
      "    return this.props.render({",
      "      $2: this.state.$2",
      "    });",
      "  }",
      "}",
      "",
      "export default $1;"
    ],
    "description": "Render Prop"
  },
  "Higher Order Component": {
    "prefix": "react:hoc",
    "body": [
      "function $1($2) {",
      "  return class extends Component {",
      "    constructor(props) {",
      "      super(props);",
      "    }",
      "",
      "    render() {",
      "      return <$2 {...this.props} $0/>",
      "    }",
      "  }",
      "}"
    ],
    "description": "Higher Order Component"
  },
  // https://material-ui.com/getting-started/usage/
  "Material-ui/Core": {
    "prefix": "mui:core",
    "body": [
      "import ${1:Box} from '@material-ui/core/${1:Box}';",
    ],
    "description": "Material-ui Core Components"
  },
  // https://material-ui.com/components/about-the-lab/
  "Material-ui/Lab": {
    "prefix": "mui:lab",
    "body": [
      "import ${1:Alert} from '@material-ui/lab/${1:Alert}';",
    ],
    "description": "Material-ui Lab Components"
  },
  // https://material-ui.com/components/icons/
  // https://material-ui.com/components/material-icons/
  "Material-ui/Icons": {
    "prefix": "mui:icons",
    "body": [
      "import ${1:Delete}Icon from '@material-ui/icons/${1:Delete}';",
    ],
    "description": "Material-ui Icons Components"
  }
}