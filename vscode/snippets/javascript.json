{
  "debugger": {
    "prefix": "deb",
    "description": "Debugger",
    "body": [
      "debugger;${0}"
    ]
  },
  "try-catch": {
    "prefix": "try:catch",
    "description": "try catch error",
    "body": [
      "try {",
      "  ${0}",
      "} catch (${1:error}) {",
      "  throw new Error(${1:error});",
      "}",
    ]
  },
  "eslint-global": {
    "prefix": "eslint:global",
    "description": "Eslint: global",
    "body": [
      "/* global ${1:GlobalVar};*/"
    ]
  },
  "eslint-off": {
    "prefix": "eslint:off",
    "description": "Eslint: off",
    "body": [
      "/* eslint ${1:eqeqeq}: \"${2:off}\"${3:, ${4:curly}: \"${5:error}\"} $0*/ "
    ]
  },
  "eslint-disable": {
    "prefix": "eslint:disable",
    "description": "Eslint: disable",
    "body": [
      "/* eslint-disable $0*/"
    ]
  },
  "eslint-enable": {
    "prefix": "eslint:enable",
    "description": "Eslint: enable",
    "body": [
      "/* eslint-enable */"
    ]
  },
  "eslint-env": {
    "prefix": "eslint:env",
    "description": "Eslint: env",
    "body": [
      "/* eslint-env $0*/"
    ]
  },
  "eslint-disable-line": {
    "prefix": "eslint:disable-disable-line",
    "description": "Eslint: disable line",
    "body": [
      "// eslint-disable-line $0"
    ]
  },
  "eslint-disable-next-line": {
    "prefix": "eslint:disable-next-line",
    "description": "Eslint: disable next line",
    "body": [
      "// eslint-disable-next-line $0"
    ]
  },
  "const": {
    "prefix": "const",
    "description": "Create const",
    "body": [
      "const ${1:varNameHere} = ${0};",
      ""
    ]
  },
  "arrow": {
    "prefix": "arrow",
    "description": "[const] Arrow function",
    "body": [
      "const ${1:functionHere} = ($2) => {",
      "  return {$0}",
      "};",
      ""
    ]
  },
  "import": {
    "prefix": "import",
    "description": "Node module import from",
    "body": [
      "import ${Module} from '${module}'",
      ""
    ]
  },
  "require": {
    "prefix": "require",
    "description": "Node module require",
    "body": [
      "const ${2:module} = require('${1:module}');${0}"
    ]
  },
  "jquery:function": {
    "prefix": "jq:function",
    "description": "[jQuery] auto executable function",
    "body": [
      "(function(${1:$}) {",
      "  ${0:// Do something here...}",
      "})(${jQuery})",
      ""
    ]
  },
  "console": {
    "prefix": "clog",
    "description": "Log output to console",
    "body": [
      "console.${2:log}(${1:var})"
    ]
  },
  "console:block": {
    "prefix": "clog",
    "description": "Block log output to console",
    "body": [
      "console.log('\\n\\n', '------ BEGIN: ${1:} ------');",
      "console.log(${2:''});",
      "console.log('------ END: ${1:} ------', '\\n\\n');"
    ]
  },
  "export": {
    "prefix": "export",
    "description": "export",
    "body": [
      "export {",
      "  ${0:// Do something here...}",
      "};",
      ""
    ]
  },
  "export:default": {
    "prefix": "export",
    "description": "export default",
    "body": [
      "export default {",
      "  ${0:// Do something here...}",
      "};",
      ""
    ]
  },
  "http:get": {
    "prefix": "http:get",
    "description": "Axios http get",
    "body": [
      "${1:http}",
      "  .get(`${2:/end/point}`, { ${3:params} })",
      "  .then(({ data }) => data)",
      "  .catch(error => ({ error }))",
      ""
    ]
  },
  "http:post": {
    "prefix": "http:post",
    "description": "Axios http POST",
    "body": [
      "${1:http}",
      "  .post(`${2:/end/point}`, { ${3:params} })",
      "  .then(({ data }) => data)",
      "  .catch(error => ({ error }))",
      ""
    ]
  },
  "promise": {
    "prefix": "promise",
    "description": "New Promise",
    "body": [
      "new Promise((resolve, reject) => {",
      "  ${0:// Do something here...}",
      "  resolve();",
      "})",
      ""
    ]
  },
  "vue:import": {
    "prefix": "v:import",
    "body": [
      "import Vue from 'vue';${0}"
    ],
    "description": "Vue import component"
  },
  "vue:import-component": {
    "prefix": "v:import",
    "body": [
      "import ${1:ComponentHere} from '@/components/${1:ComponentHere}';${0}"
    ],
    "description": "Vue import component"
  },
  "vue:data": {
    "prefix": "v:data",
    "description": "Vue data",
    "body": [
      "data() {",
      "  return {",
      "    ${1:title}: ${2:'Hello World!'},${0}",
      "  };",
      "},"
    ]
  },
  "vue:data-arrow": {
    "prefix": "v:data",
    "description": "Vue data [arrow function]",
    "body": [
      "data: () => ({",
      "  ${1:title}: ${2:'Hello World!'},",
      "}),"
    ]
  },
  "vue:asyncData": {
    "prefix": "v:asyncData",
    "description": "Nuxt asyncData arrow function",
    "body": [
      "asyncData({ ${1:isDev}${2:, route}${3:, store}${4:, env}${5:, params}${6:, query}${7:, req}${8:, res}${9:, redirect}${10:, error} }) {",
      "  return {",
      "    ${0:title: 'Hello World!'},",
      "  };",
      "},"
    ]
  },
  "vue:fetch": {
    "prefix": "v:fetch",
    "description": "scripts: Nuxt fetch",
    "body": [
      "fetch({ store, params }) {",
      "  return http.get('/end/point')",
      "    .then((res) => {",
      "      store.commit('setStars', res.data)",
      "    });",
      "},"
    ]
  },
  "vue:fetch-async": {
    "prefix": "v:fetch:async",
    "description": "scripts: Nuxt fetch",
    "body": [
      "async fetch({ store, params }) {",
      "  let { data } = await http.get('/end/point')",
      "  store.commit('setStars', data)",
      "},"
    ]
  },
  "vue:components": {
    "prefix": "v:components",
    "description": "scripts: vue components",
    "body": [
      "components: {",
      "  ${0:VueComponent}: () => import('${1:@/components/VueComponent.vue}'),",
      "},"
    ]
  },
  "vue:mounted": {
    "prefix": "v:mounted",
    "description": "scripts: vue mounted",
    "body": [
      "mounted() {",
      "  ${1:console.log('mounted...');}${0}",
      "},"
    ]
  },
  "vue:methods": {
    "prefix": "v:methods",
    "description": "scripts: vue methods",
    "body": [
      "methods: {",
      "  ${0}",
      "},"
    ]
  },
  "vue:computed": {
    "prefix": "v:computed",
    "description": "scripts: vue computed",
    "body": [
      "computed: {",
      "  ...mapState({",
      "    ${2:isLoading}: ({ ${1:user} }) => ${1:user}.${2:isLoading},${0}",
      "  }),",
      "},"
    ]
  },
  "vue:props": {
    "prefix": "v:props",
    "description": "scripts: vue props",
    "body": [
      "props: {",
      "  ${1:title}: {",
      "    type: ${2:String},",
      "    default: ${3:'Hello Props!'},${0}",
      "  },",
      "},"
    ]
  },
  "vue:watch": {
    "prefix": "v:watch",
    "description": "scripts: vue watch",
    "body": [
      "['search']() {",
      "  const timeout = setTimeout(() => {",
      "    console.log('watching search...');",
      "  }, 500);",
      "},"
    ]
  },
  "vuex:import": {
    "prefix": "vx:import",
    "description": "vuex import",
    "body": [
      "import { ${1:mapState,} ${2:mapActions,} ${3:mapMutations} } from 'vuex';${0}"
    ]
  },
  "vuex": {
    "prefix": "vx",
    "description": "Vuex start",
    "body": [
      "const state = {",
      "  ${0}",
      "}",
      "",
      "const mutations = {",
      "}",
      "",
      "const actions = {",
      "}",
      "",
      "export default {",
      "  namespaced: true,",
      "  state,",
      "  mutations,",
      "  actions",
      "}",
      ""
    ]
  },
  "vuex-muxt": {
    "prefix": "vx",
    "description": "[Nuxt] Vuex start",
    "body": [
      "export const state = () => ({",
      "  ${0}",
      "});",
      "",
      "export const mutations = {",
      "};",
      "",
      "export const actions = {",
      "};",
      "",
      "export const getters = {",
      "};",
      ""
    ]
  },
  "vuex:state": {
    "prefix": "vx:state",
    "description": "Vuex state",
    "body": [
      "export const state = () => ({",
      "  ${1:loading}: ${2:false},",
      "});",
      ""
    ]
  },
  "vuex:mapState": {
    "prefix": "vx:mapState",
    "description": "scripts: vuex mapState",
    "body": [
      "...mapState({",
      "  ${2:stateVar}: ({ ${1:namespace} }) => ${1:namespace}.${2:stateVar},${0}",
      "}),"
    ]
  },
  "vuex:mapActions": {
    "prefix": "vx:mapActions",
    "description": "scripts: vuex mapActions",
    "body": [
      "...mapActions({",
      "  ${2:storeActionHere}: '${1:namespace/}${2:storeActionHere}',",
      "}),"
    ]
  },
  "vuex:mapMutations": {
    "prefix": "vx:mapMutations",
    "description": "scripts: vuex mapMutations",
    "body": [
      "...mapMutations({",
      "  ${2:storeMutation}: '${1:namespace/}${2:storeMutation}',",
      "}),"
    ]
  },
  "react:import": {
    "prefix": "react:import",
    "description": "import react",
    "body": [
      "import React from 'react';"
    ]
  },
  "react:base:class": {
    "prefix": "react:base",
    "description": "React class base component",
    "body": [
      "import React, { Component } from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "class ${1:ComponentName} extends Component {",
      "  static propTypes = {",
      "    ${2:children}: PropTypes.${3:node}${4:.isRequired},",
      "  }",
      "",
      "  constructor(props) {",
      "    super(props)",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <>",
      "        {${2:children}}${0}",
      "      </>",
      "    );",
      "  };",
      "};",
      "",
      "export default ${1:ComponentName};",
      ""
    ]
  },
  "react:base:stateless": {
    "prefix": "react:base",
    "description": "React stateless base component",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "const ${1:ComponentName} = ({ ${2:children} }) => {",
      "  return (",
      "    <>",
      "      {${2:children}}${0}",
      "    </>",
      "  );",
      "};",
      "",
      "${1:ComponentName}.propTypes = {",
      "  ${2:children}: PropTypes.${3:node}${4:.isRequired},",
      "};",
      "",
      "export default ${1:ComponentName};",
      ""
    ]
  }
}